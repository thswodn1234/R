result.lm <- lm(formula = y ~x1 + x2, data = df)
result.lm
# 실습: 다중 공선성 문제 확인
# 단계 1: 패키지 설치
install.packages("car")
library(car)
# 단계 2: 분산팽창요인(VIF)
vif(result.lm)
# 실습: 다중 회귀분석 결과보기
summary(result.lm)
# 실습: 다중 공선성 ㅁ누제 확인
# 단계 1: 패키지 설치 및 데이터 로딩
install.packages("car")
install.packages("car")
library(car)
data(iris)
# 단계 2: iris 데이터 셋으로 다중 회귀분석
model <- lm(formula = Sepal.Length ~ Sepal.Width +
Petal.Length + Petal.Width, data = iris)
vif(model)
sqrt(vif(model)) > 2
# 단계 3: iris 변수 간의 상관계수 구하기
cor(iris[ , -5])
# 실습: 데이터 셋 생성과 회귀모델 생성
# 단계 1: 학습데이터와 검저엗이터 표본 추출
x <-sample(1:nrow(iris), 0.7 * nrow(iris))
train <- iris[x, ]
test <- iris[-x, ]
# 단계 2: 변수 제거 및 다중 회귀분석
model <- lm(formula = Sepal.Length ~ Sepal.Width + Petal.Length, data = train)
# 단계 2: 변수 제거 및 다중 회귀분석 width 없음
model <- lm(formula = Sepal.Length ~ Sepal.Width + Petal.Length, data = train)
model
summary(model)
# 실습: 회귀방정식 도출
# 단계 1: 회귀방정식을 위한 절편과 기울기 보기
model
# 단계 2: 회귀방정식 도출
head(train, 1)
# 다중 회귀방정식 적용
Y = 2.3826 +  0.5684 * 2.9 + 0.4576 * 4.6
Y
6.6 - Y
# 실습: 검정데이터의 독립변수를 이용한 예측치 생성
pred <- predict(model, test)
pred
# 실습: 상관계수를 이용한 회귀모델 평가
cor(pred, test$Sepal.Length)
# 실습: 회귀분석의 기본 가정 충족으로 회귀분석 수행
# 단계 1: 회귀모델 생성
# 단계 1-1: 벼수 모델링
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
# 단계 1-2: 회귀모델 생성
model <- lm(formula = formula, data = iris)
model
# 단계 2: 잔차(오차) 부석
# 단계 2-1: 독립성 검정 - 더빈 왓슨 값으로 확인
install.packages('lmtest')
library(lmtest)
dwtest(model)
# 단계 2-2: 등분산성 검정 - 잔차와 적합값의 분포
plot(model, which = 1)
# 단계 2-3: 잔차의 정규성 검정
attributes(model)
res <- residuals(model)
shapiro.test(res)
par(mfrow = c(1, 2))
hist(res, freq = F)
qqnorm(res)
install.packages("jsonlite")
library(jsonlite)
apikey <- "f5eef3421c602c6cb7ea224104795888"
dt <- "20221220"
url <- paste("http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=", apikey ,"&targetDt=" , dt, sep="")
mv <- fromJSON(url)
mv
class(mv)
mode(mv)
# 박스오피스 목록 추출
BoxOfficeList <- mv$boxOfficeResult$dailyBoxOfficeList
names(BoxOfficeList)
str(BoxOfficeList)
col <- c("rnum","rank","rankInten",
"salesAmt","salesShare","salesInten","salesChange","salesAcc",
"audiCnt","audiInten","audiChange","audiAcc","scrnCnt","showCnt")
for (c in col){
BoxOfficeList[c] <- as.numeric(unlist(BoxOfficeList[c]))
}
str(BoxOfficeList)
# 매출평균보다 매출이 높은 영화
library(dplyr)
BoxOfficeList %>%
filter(salesAmt > mean(salesAmt)) %>%
select(rank, movieNm, salesAmt)
mean(BoxOfficeList$salesAmt)
mv <- fromJSON(url)
f1 <- function(x){
apikey <- "f5eef3421c602c6cb7ea224104795888"
dt <- x
url <- paste("http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=", apikey ,"&targetDt=" , dt, sep="")
mv <- fromJSON(url)
BoxOfficeList <- mv$boxOfficeResult$dailyBoxOfficeList
return(BoxOfficeList$movieNm)
}
f1("20120112")
f1("20140112")
f1("20150112")
f1("20160112")
f1("20220112")
f1("20220112")
f1("20210112")
f1("20160112")
f1("20220112")
f1("20221212")
f1("20221219")
# 날짜를 입력하면 영화목록 출력
box <- function(x){
apikey <- "f5eef3421c602c6cb7ea224104795888"
dt <- x
url <- paste("http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=", apikey ,"&targetDt=" , dt, sep="")
mv <- fromJSON(url)
BoxOfficeList <- mv$boxOfficeResult$dailyBoxOfficeList
return(BoxOfficeList$movieNm)
}
box("20221219")
# 요일별 음식물쓰레기
apikey <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
page <- "1"
rowNum <- "10"
groupCode <- "W10"
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteService/getCommonList?ServiceKey=",apikey,"&type=json&page=",page,"&rowNum=",rowNum,"&groupCode=",groupCode,sep="")
g <- fromJSON(api)
# 요일별 음식물쓰레기
apikey <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
page <- 1
rowNum <- 10
groupCode <- "W10"
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteService/getCommonList?ServiceKey=",apikey,"&type=json&page=",page,"&rowNum=",rowNum,"&groupCode=",groupCode,sep="")
g <- fromJSON(api)
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
page <- 1
rowNum <- 10
groupCode <- "W10"
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteService/getCommonList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&groupCode=",groupCode,sep="")
g <- fromJSON(api)
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D&type=json&page=1&rowNum=10&disYear=2020&disMonth=06")
g <- fromJSON(api)
g
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
page <- 1
rowNum <- 10
groupCode <- "W10"
disYear <- 2020
disMonth <- 7
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum"&disYear=",disYear,"&disMonth=",disMonth,sep="")
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=",disMonth,sep="")
g <- fromJSON(api)
g
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
page <- "1"
rowNum <- "10"
groupCode <- "W10"
disYear <- "2020"
disMonth <- "7"
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=",disMonth,sep="")
g <- fromJSON(api)
g
# api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=",disMonth,sep="")
api <- "http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D&type=xml&page=1&rowNum=2&disYear=2020&disMonth=06"
g <- fromJSON(api)
# api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=",disMonth,sep="")
api <- "http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D&type=xml&page=1&rowNum=2&disYear=2020&disMonth=06"
g <- fromJSON(api)
g
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D&type=json&page=1&rowNum=2&disYear=2020&disMonth=06")
g <- fromJSON(api)
g
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=1&rowNum=2&disYear=2020&disMonth=06", sep="")
g <- fromJSON(api)
g
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=2&disYear=2020&disMonth=06", sep="")
g <- fromJSON(api)
g
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=2020&disMonth=06", sep="")
g <- fromJSON(api)
g
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
page <- 1
rowNum <- 10
disYear <- 2020
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=06", sep="")
g <- fromJSON(api)
g
disYear <- 2019
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=06", sep="")
g <- fromJSON(api)
g
disMonth <- 5
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=",disMonth, sep="")
g <- fromJSON(api)
g
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=06", sep="")
g <- fromJSON(api)
g
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
page <- 1
rowNum <- 10
disYear <- 2019
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=06", sep="")
g <- fromJSON(api)
g
disMonth <- 05
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=",disMonth, sep="")
g <- fromJSON(api)
g
disMonth <- "05"
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=",disMonth, sep="")
g <- fromJSON(api)
g
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=",disMonth, sep="")
garbage(1,10,2019,"04")
garbage <- function(x,y,z,w){
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
page <- x
rowNum <- y
disYear <- z
disMonth <- w
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",disYear,"&disMonth=",disMonth, sep="")
g <- fromJSON(api)
return(g$data$list)
}
garbage(1,10,2019,"04")
View(g)
#한국환경공단_에어코리아_대기오염통계 현황
#시도별 실시간 평균정보 조회 상세기능명세
#최근 한달간 지역별 일평균 대기오염 정보
#기준초과인경우
#https://www.airkorea.or.kr/web/contents/contentView/?pMENU_NO=132&cntnts_no=6
setwd("C:/Users/user/Desktop/수업자료/R프로그래밍/1223")
#json처리
install.packages("jsonlite")
library(jsonlite)
#자료처리
library(dplyr)
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
url <- paste("http://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&pageNo=1&numOfRows=100&returnType=json&serviceKey=",key,sep="")
air <- fromJSON(url)
air
View(air)
air$response$body$items
View(air)
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
url <- paste("https://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&searchCondition=MONTH&pageNo=1&numOfRows=100&returnType=json&serviceKey=",key,sep="")
air <- fromJSON(url)
url <- paste("https://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&searchCondition=MONTH&pageNo=1&numOfRows=100&returnType=json&serviceKey=86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D",key,sep="")
air <- fromJSON(url)
url <- url <- "https://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&searchCondition=MONTH&pageNo=1&numOfRows=100&returnType=json&serviceKey=86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
air <- fromJSON(url)
air$response$body$items
url <- "https://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&searchCondition=MONTH&pageNo=1&numOfRows=100&returnType=json&serviceKey=86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
library(jsonlite)
air <- fromJSON(url)
url <- "http://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&searchCondition=MONTH&pageNo=1&numOfRows=100&returnType=json&serviceKey=86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
air <- fromJSON(url)
air$response$body$items
library(jsonlite)
#자료처리
library(dplyr)
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
url <- paste("http://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&searchCondition=MONTH&pageNo=1&numOfRows=100&returnType=json&serviceKey=",key,sep="")
air <- fromJSON(url)
air
View(air)
View(air)
air$response$body$items
return(data$response$body$items)
#데이터 가져오기함수
getData <- function(item, gubun) {
item <-
url <- paste("http://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&searchCondition=MONTH&pageNo=1&numOfRows=100&returnType=json&serviceKey=",key,sep="")
data <- fromJSON(url)
return(data$response$body$items)
}
pm10 <- getData("PM10","DAILY")
o3 <- getData("o3","DAILY")
names(pm10)
names(o3)
getData <- function(item, gubun) {
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
url <- paste("https://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?",
"itemCode=",item,
"&dataGubun=",Gubun,
"&searchCondition=MONTH",
"&pageNo=1&numOfRows=100&returnType=json&",
"serviceKey=",key, sep='')
data <- fromJSON(url)
return(data$response$body$items)
}
pm10 <- getData("PM10","DAILY")
getData <- function(item, gubun) {
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
url <- paste("https://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?",
"itemCode=",item,
"&dataGubun=",gubun,
"&searchCondition=MONTH",
"&pageNo=1&numOfRows=100&returnType=json&",
"serviceKey=",key, sep='')
data <- fromJSON(url)
return(data$response$body$items)
}
pm10 <- getData("PM10","DAILY")
getData <- function(item, gubun) {
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
url <- paste("https://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?",
"itemCode=",item,
"&dataGubun=",gubun,
"&searchCondition=MONTH",
"&pageNo=1&numOfRows=100&returnType=json&",
"serviceKey=",key, sep='')
data <- fromJSON(url)
return(data$response$body$items)
}
pm10 <- getData("PM10","DAILY")
getData <- function(item, gubun) {
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
url <- paste("http://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?",
"itemCode=",item,
"&dataGubun=",gubun,
"&searchCondition=MONTH",
"&pageNo=1&numOfRows=100&returnType=json&",
"serviceKey=",key, sep='')
data <- fromJSON(url)
return(data$response$body$items)
}
pm10 <- getData("PM10","DAILY")
o3 <- getData("o3","DAILY")
names(pm10)
names(o3)
df
pm10 <- getData("PM10","DAILY")
o3 <- getData("o3","DAILY")
names(pm10)
names(o3)
pm10
o3
str(pm10)
str(o3)
df <- rbind(pm10,o3)
df
View(o3)
View(o3)
View(pm10)
View(pm10)
getData <- function(item, gubun) {
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
url <- paste("http://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?",
"itemCode=",item,
"&dataGubun=",gubun,
"&searchCondition=MONTH&pageNo=1&numOfRows=100&returnType=json&serviceKey=",key, sep='')
data <- fromJSON(url)
return(data$response$body$items)
}
pm10 <- getData("PM10","DAILY")
o3 <- getData("o3","DAILY")
names(pm10)
names(o3)
str(pm10)
str(o3)
df <- rbind(pm10,o3)
df
View(df)
View(df)
df <- bind_rows(pm10,o3)
df
View(df)
names(df)
length(df)
#2. 지역명 벡터
area <- c("seoul", "busan", "daegu","incheon","gwangju",
"daejeon", "ulsan", "gyeonggi", "gangwon",
"chungbuk", "chungnam", "jeonbuk", "jeonnam",
"gyeongbuk", "gyeongnam", "jeju", "sejong")
areaname <- c("서울","부산","대구","인천","광주","대전",
"울산","경기","강원","충북","충남","전북",
"전남","경북","경남","제주","세종")
names(df)
df
names(df)
for(i in 1: length(area)) {
temp$dataTime <- unlist(df["dataTime"])
temp$itemCode <- unlist(df["itemCode"])
temp$area <- areaname[i]
temp$item <- unlist(df[i])
dft <- bind_rows(dft,temp)
}
temp <- data.frame()
for(i in 1: length(area)) {
temp$dataTime <- unlist(df["dataTime"])
temp$itemCode <- unlist(df["itemCode"])
temp$area <- areaname[i]
temp$item <- unlist(df[i])
dft <- bind_rows(dft,temp)
}
#3. 통합데이터프레임 만들기
dft <- data.frame()
temp <- data.frame()
for(i in 1: length(area)) {
temp$dataTime <- unlist(df["dataTime"])
temp$itemCode <- unlist(df["itemCode"])
temp$area <- areaname[i]
temp$item <- unlist(df[i])
dft <- bind_rows(dft,temp)
}
for(i in 1: length(area)) {
temp$dataTime <- unlist(df["dataTime"])
temp$itemCode <- unlist(df["itemCode"])
temp$area <- areaname[i]
temp$item <- unlist(df[i])
dft <- bind_rows(dft,temp)
}
getData <- function(item, gubun) {
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
url <- paste("http://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?",
"itemCode=",item,
"&dataGubun=",gubun,
"&searchCondition=MONTH&pageNo=1&numOfRows=100&returnType=json&serviceKey=",key, sep='')
data <- fromJSON(url)
return(data$response$body$items)
}
pm10 <- getData("PM10","DAILY")
o3 <- getData("o3","DAILY")
names(pm10)
names(o3)
str(pm10)
str(o3)
df <- bind_rows(pm10,o3)
df
length(df)
#2. 지역명 벡터
area <- c("seoul", "busan", "daegu","incheon","gwangju",
"daejeon", "ulsan", "gyeonggi", "gangwon",
"chungbuk", "chungnam", "jeonbuk", "jeonnam",
"gyeongbuk", "gyeongnam", "jeju", "sejong")
areaname <- c("서울","부산","대구","인천","광주","대전",
"울산","경기","강원","충북","충남","전북",
"전남","경북","경남","제주","세종")
names(df)
#3. 통합데이터프레임 만들기
dft <- data.frame()
temp <- data.frame()
for(i in 1: length(area)) {
temp <- data.frame()
temp$dataTime <- unlist(df["dataTime"])
temp$itemCode <- unlist(df["itemCode"])
temp$area <- areaname[i]
temp$item <- unlist(df[i])
dft <- bind_rows(dft,temp)
}
for (i  in 1 : length(area)){
print(area)
}
df
names(df)
for(i in 1 : length(area)) {
temp <- data.frame()
temp$dataTime <- unlist(df["dataTime"])
temp$itemCode <- unlist(df["itemCode"])
temp$area <- areaname[i]
temp$item <- unlist(df[i])
dft <- bind_rows(dft,temp)
}
for(i in 1 : length(area)) {
temp <- data.frame()
temp$dataTime <- unlist(df["dataTime"])
temp$itemCode <- unlist(df["itemCode"])
temp$area <- areaname[i]
temp$item <- unlist(df[i])
dft <- rbind(dft,temp)
}
View(temp)
View(temp)
View(pm10)
df
#2. 지역명 벡터
area <- c("seoul", "busan", "daegu","incheon","gwangju",
"daejeon", "ulsan", "gyeonggi", "gangwon",
"chungbuk", "chungnam", "jeonbuk", "jeonnam",
"gyeongbuk", "gyeongnam", "jeju", "sejong")
areaname <- c("서울","부산","대구","인천","광주","대전",
"울산","경기","강원","충북","충남","전북",
"전남","경북","경남","제주","세종")
names(df)
#3. 통합데이터프레임 만들기
dft <- data.frame()
df
for(i in 1 : length(area)) {
temp <- data.frame()
temp$dataTime <- unlist(df["dataTime"])
temp$itemCode <- unlist(df["itemCode"])
temp$area <- areaname[i]
temp$item <- unlist(df[i])
dft <- rbind(dft,temp)
}
for(i in 1 : length(area)) {
temp <- data.frame()
temp$dataTime <- unlist(df["dataTime"])
temp$itemCode <- unlist(df["itemCode"])
temp$area <- areaname[i]
temp$item <- unlist(df[i])
dft <- rbind(dft,temp)
}
