# 실습: 패키지 로딩
#library(KoNLP)
install.packages("hash")
install.packages("tau")
install.packages("devtools")
install.packages("RSQLite")
library(KoNLP)
# 실습: 패키지 로딩
#library(KoNLP)
install.packages("KoNLP")
# 실습: 형태소 분석을 위한 KoNLP 패키지 설치
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip",
repos = NULL)
# 실습: 한글 사전과 텍스트 마이닝 관련 패키지 설치
install.packages("Sejong")
install.packages("wordcloud")
install.packages("tm")
# 실습: 패키지 로딩
#library(KoNLP)
install.packages("KoNLP")
# 실습: 형태소 분석을 위한 KoNLP 패키지 설치
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip",
repos = NULL)
library(KoNLP)
##2.0 Rstudio 실행 - 관리자 권한으로 실행
# rJava 먼저 설치해야 함
install.packages("rJava")
# # 2.1 환경 설정
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"')
quit
#
# # 2.2 R Restart
#
# # 2.3 make 확인
Sys.which("make")
# # 2.4 패키지 설치
install.packages("jsonlite", type = "source")
# 3. java, rJava 설치하기
install.packages("multilinguer")
library(multilinguer)
# warning message가 나오면 다시 실행한다
install_jdk() #3 Yup을 선택, #install JDK 선택시에 Absolutely를 선택
# 4. 의존성 패키지 설치하기
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
# 5. github 버전 설치하기
install.packages("remotes")
# 6. KoNLP 설치하기(64bit에서만 동작)
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
# 7. Test
extractNoun('인하대학교 공학대학원 블록체인 전공입니다.')
'인하대학교 공학대학원 블록체인 전공입니다.'
# 7. Test
extractNoun('인하대학교 공학대학원 블록체인 전공입니다.')
# 실습: 형태소 분석을 위한 KoNLP 패키지 설치
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip",
repos = NULL)
# 실습: 한글 사전과 텍스트 마이닝 관련 패키지 설치
install.packages("Sejong")
install.packages("wordcloud")
install.packages("tm")
# 실습: 패키지 로딩
#library(KoNLP)
install.packages("KoNLP")
install.packages("hash")
install.packages("tau")
install.packages("devtools")
install.packages("RSQLite")
library(KoNLP)
library(tm)
library(wordcloud)
# 실습: 텍스트 자료 가져오기
facebook <- file("C:/Rwork/Part-II/facebook_bigdata.txt",
encoding = "UTF-8")
facebook_data <- readLines(facebook)
head(facebook_data)
# 실습: 세종 사전에 단어 추가하기
user_dic <- data.frame(term = c("R 프로그래밍", "페이스북", "김진성", "소셜네트워크"),
tag = 'ncn')
buildDictionary(ext_dic = "sejong", user_dic = user_dic)
# 실습: R 제공 함수로 단어 추출하기
paste(extractNoun('김진성은 많은 사람과 소통을 위해서 소셜네트워크에 가입하였습니다.'),
collapse = " ")
# 실습: 단어 추출을 위한 사용자 함수 정의하기
# 단계 1: 사용자 정의 함수 작성
exNouns <- function(x) { paste(extractNoun(as.character(x)), collapse = " ") }
# 단계 2: exNouns() 함수를 이용하여 단어 추출
facebook_nouns <- sapply(facebook_data, exNouns)
facebook_nouns[1]
# 실습: 추출된 단어를 대상으로 전처리하기
# 단계 1: 추출된 단어를 이용하여 말뭉치(Corpus) 생성
myCorpus
# 단계 2: 데이터 전처리
# 단계 2-1: 문장부호 제거
myCorpusPrepro <- tm_map(myCorpus, removePunctuation)
# 단계 2-2: 수치 제거
myCorpusPrepro <- tm_map(myCorpusPrepro, removeNumbers)
# 단계 2-3: 소문자 변경
myCorpusPrepro <- tm_map(myCorpusPrepro, tolower)
# 단계 2-4: 불용어 제거
myCorpusPrepro <- tm_map(myCorpusPrepro, removeWords, stopwords('english'))
# 단계 2-5: 전처리 결과 확인
inspect(myCorpusPrepro[1:5])
# 실습: 단어 선별(2 ~ 8 음절 사이 단어 선택)하기
# 단계 1: 전처리된 단어집에서 2 ~ 8 음절 단어 대상 선정
myCorpusPrepro_term <-
TermDocumentMatrix(myCorpusPrepro,
control = list(wordLengths = c(4, 16)))
myCorpusPrepro_term
##2.0 Rstudio 실행 - 관리자 권한으로 실행
# rJava 먼저 설치해야 함
install.packages("rJava")
# # 2.1 환경 설정
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"')
# # 2.1 환경 설정
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"')
#
# # 2.2 R Restart
#
# # 2.3 make 확인
Sys.which("make")
# # 2.4 패키지 설치
install.packages("jsonlite", type = "source")
# 3. java, rJava 설치하기
install.packages("multilinguer")
library(multilinguer)
# warning message가 나오면 다시 실행한다
install_jdk() #3 Yup을 선택, #install JDK 선택시에 Absolutely를 선택
# warning message가 나오면 다시 실행한다
install_jdk() #3 Yup을 선택, #install JDK 선택시에 Absolutely를 선택
# 4. 의존성 패키지 설치하기
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
# 5. github 버전 설치하기
install.packages("remotes")
install.packages("remotes")
# 6. KoNLP 설치하기(64bit에서만 동작)
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
# 7. Test
extractNoun('인하대학교 공학대학원 블록체인 전공입니다.')
# 실습: 형태소 분석을 위한 KoNLP 패키지 설치
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip",
repos = NULL)
# 실습: 한글 사전과 텍스트 마이닝 관련 패키지 설치
install.packages("Sejong")
install.packages("wordcloud")
install.packages("tm")
# 실습: 패키지 로딩
#library(KoNLP)
install.packages("KoNLP")
# 실습: 패키지 로딩
#library(KoNLP)
install.packages("KoNLP",
repos = "https://forkonlp.r-universe.dev",
dependencies = TRUE,
INSTALL_opts = c("--no-multiarch")
)
install.packages("hash")
install.packages("tau")
install.packages("devtools")
install.packages("RSQLite")
# 라이브러리 불러오기
library(KoNLP)
# 라이브러리 불러오기
library(KoNLP)
#암종류별 성별 분석
install.packages("dplyr")
library(dplyr)
#데이터 불러오기(암발생자수)
setwd("C:/Users/user/Desktop/수업자료/R프로그래밍/1208/")
df1 <- read.csv("../1208/03/03_암발생자수_.csv", header = TRUE")
df1
as.data.frame(df1)
# 열명 변경
# "암종별", "성별", "연령별", "발생자수", "조발생률"
names(df1) <- c("암종별","성별","연령별","발생자수","조발생률률")
names(df1)
# 데이터셋 조회
# 1) 특정 변수 조회
# 2) 특정 열명을 사용하여 조회
# 3) 특정 행 조회 :1행 조회
# 4)특정행 제거 : 1행제거
# 5) 특정행 열 조회
# 열 데이터 타입 확인
# 값 변경 : - => 0
# 열 데이터타입 변경
# 모든암 제거하고 연령별이 계인 데이터
# 그래프
library(ggplot2)
df1 <- read.csv("03/03_암발생자수_.csv", header = TRUE")
df1
as.data.frame(df1)
# 열명 변경
# "암종별", "성별", "연령별", "발생자수", "조발생률"
names(df1) <- c("암종별","성별","연령별","발생자수","조발생률률")
names(df1)
# 데이터셋 조회
# 1) 특정 변수 조회
# 2) 특정 열명을 사용하여 조회
# 3) 특정 행 조회 :1행 조회
# 4)특정행 제거 : 1행제거
# 5) 특정행 열 조회
# 열 데이터 타입 확인
# 값 변경 : - => 0
# 열 데이터타입 변경
# 모든암 제거하고 연령별이 계인 데이터
# 그래프
library(ggplot2)
View(df)
View(df)
#암종류별 성별 분석
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
#데이터 불러오기(암발생자수)
setwd("C:/Users/user/Desktop/수업자료/R프로그래밍/1208/")
df1 <- read.csv("03/03_암발생자수_.csv", header = TRUE")
df1
as.data.frame(df1)
# 열명 변경
# "암종별", "성별", "연령별", "발생자수", "조발생률"
names(df1) <- c("암종별","성별","연령별","발생자수","조발생률률")
names(df1)
# 데이터셋 조회
# 1) 특정 변수 조회
# 2) 특정 열명을 사용하여 조회
# 3) 특정 행 조회 :1행 조회
# 4)특정행 제거 : 1행제거
# 5) 특정행 열 조회
# 열 데이터 타입 확인
# 값 변경 : - => 0
# 열 데이터타입 변경
# 모든암 제거하고 연령별이 계인 데이터
# 그래프
library(ggplot2)
df1 <- read.csv("./03/03_암발생자수_.csv, header = TRUE")
#데이터 불러오기(암발생자수)
setwd("C:/Users/user/Desktop/수업자료/R프로그래밍/1208/")
df1 <- read.csv("./03/03_암발생자수_.csv, header = TRUE")
df1
as.data.frame(df1)
df1 <- read.csv("./03/03_암발생자수_.csv", header = TRUE, stringAsFactors = F, fileEncoding =
'euc-kr')
df1 <- read.csv("./03/03_암발생자수_.csv", header = TRUE)
df1
names(df1) <- c("암종별","성별","연령별","발생자수","조발생률률")
names(df1)
df1
# 데이터셋 조회
# 1) 특정 변수 조회
df1$암종별
# 2) 특정 열명을 사용하여 조회
df1['암종별']
class(t1)
# 데이터셋 조회
# 1) 특정 변수 조회
t1 <- df1$암종별
class(t1)
mode(t1)
# 2) 특정 열명을 사용하여 조회
t2 <- df1['암종별']
mode(t2)
class(t2)
is.vector(t1)
# 3) 특정 행 조회 :1행 조회
df1[1,]
df1[c(2,4)]
df1[c(2,4),]
# 4)특정행 제거 : 1행제거
df1[-1,]
# 4)특정행 제거 : 1행제거
df <- df1[-1,]
head(df)
# 암종류 확인
df['암종별']
# 암종류 확인
df$'암종별'
# 암종류 확인
unique(df$'암종별')
# dplyr는 %>% 연산을 쓸수 있다
df2 <- df1 %>%
filter(암종별 != "모든 암(C00-C96)")
df2
unique(df2$'암종별') #중복제거거
# dplyr는 %>% 연산을 쓸수 있다
df2 <- df %>%
filter(암종별 != "모든 암(C00-C96)")
unique(df2$'암종별')
# dplyr는 %>% 연산을 쓸수 있다
df2 <- df %>%
filter(암종별 != "모든 암(C00-C96)") %>%
filter(연령별 == "계")
df2
df21 <- df2 %>%
filter(!(성별 %in% c("계", "여자")))
df21
df22 <- df2 %>%
filter(!(성별 %in% c("계", "남남자")))
df22
df22 <- df2 %>%
filter(!(성별 %in% c("계", "남자")))
df22
# 성별 남
df21 <- df2 %>%
filter(성별 == "계")
df21
# 성별 여여
df22 <- df2 %>%
filter(!(성별 =="계"))
df22
# 특정 열 가져오기
df21 <- df21[,c('암종별', '발생자수')]
df21
df22 <- df21[,c('암종별', '발생자수','암종별 발생자수')]
df22
df22 <- df21[,c('암종별','성별', '발생자수')]
df22
df22 <- df22[,c('암종별','성별', '발생자수')]
df22
# 5) 특정행 열 조회
df[1,1]
# 5) 특정행 열 조회
df[1,'암종별별']
View(df)
View(df)
# 5) 특정행 열 조회
df[1,'암종별']
# 5) 특정행 열 조회
df[1:3,'암종별']
# 5) 특정행 열 조회
df[1:3,c('암종별','발생자수수')]
# 5) 특정행 열 조회
df[1:3,c('암종별','발생자수')]
# 열 데이터 타입 확인
str(df)
# 값 변경 : - => 0
df22$발생자수 <- ifelse(df22$발생자수 == '-',0)
df22
# 값 변경 : - => 0
df22$발생자수 <- ifelse(df22$발생자수 == '-',0)
# 값 변경 : - => 0
df22$발생자수 <- ifelse(df22$발생자수 == '-',0, *value if NO*)
# 값 변경 : - => 0
df22$발생자수 <- ifelse(df22$발생자수 == '-',0, df22$발생자수)
df22
names(df1) <- c("암종별","성별","연령별","발생자수","조발생률")
names(df1)
head(df)
# 4)특정행 제거 : 1행제거
# -(마이너스) 붙이면 제거
df <- df1[-1,]
head(df)
df$발생자수 <- ifelse(df$발생자수 == '-',0, df$발생자수)
df$조발생률 <- ifelse(df$조발생률 == '-',0, df$조발생률)
str(df)
df
df$발생자수 <- ifelse(df$발생자수 == '-',0, df$발생자수)
df
df$조발생률 <- ifelse(df$조발생률 == '-',0, df$조발생률)
df
str(df)
# 암종류 확인
unique(df$'암종별') #중복제거거
# dplyr는 %>% 연산을 쓸수 있다
df2 <- df %>%
filter(암종별 != "모든 암(C00-C96)") %>%
filter(연령별 == "계")
# 성별 남
df21 <- df2 %>%
filter(성별 == "계")
df21
# 성별 여여
df22 <- df2 %>%
filter(!(성별 =="계"))
df22
# 특정 열 가져오기
df21 <- df21[,c('암종별', '발생자수')]
df21
df22 <- df22[,c('암종별','성별', '발생자수')]
df22
# 5) 특정행 열 조회
df[1:3,c('암종별','발생자수')]
# 값 변경 : - => 0
df22$발생자수 <- ifelse(df22$발생자수 == '-',0, df22$발생자수)
df22
str(df22)
# 값 변경 : - => 0
df22$발생자수 <- ifelse(df22$발생자수 == '-',0, df22$발생자수)
df22
str(df22)
df$발생자수 <-as.numeric(df$발생자수)
df
str(df)
df$조발생률 <-as.numeric(df$조발생률률)
df$조발생률 <-as.numeric(df$조발생률)
df
str(df)
df22$발생자수 <- ifelse(df22$발생자수 == '-',0, df22$발생자수)
df22
df22$발생자수 <-as.numeric(df22$발생자수)
str(df22)
df21
df21$발생자수 <-as.numeric(df21$발생자수)
str(df21)
#데이터 불러오기(암발생자수)
setwd("C:/Users/user/Desktop/수업자료/R프로그래밍/1208/")
df1 <- read.csv("./03/03_암발생자수_.csv", header = TRUE)
df1
names(df1) <- c("암종별","성별","연령별","발생자수","조발생률")
names(df1)
df2
unique(df2$'암종별')
# 데이터셋 조회
# 1) 특정 변수 조회
t1 <- df1$암종별
mode(t1)
class(t1)
is.vector(t1)
# 2) 특정 열명을 사용하여 조회
t2 <- df1['암종별']
mode(t2)
class(t2)
# 3) 특정 행 조회 :1행 조회
df1[1,]
df1[c(2,4),]
# 4)특정행 제거 : 1행제거
# -(마이너스) 붙이면 제거
df <- df1[-1,]
head(df)
# 암종류 확인
unique(df$'암종별') #중복제거거
# dplyr는 %>% 연산을 쓸수 있다
df2 <- df %>%
filter(암종별 != "모든 암(C00-C96)") %>%
filter(연령별 == "계")
# 성별 남
df21 <- df2 %>%
filter(성별 == "계")
df21
# 성별 여여
df22 <- df2 %>%
filter(!(성별 =="계"))
df22
# 특정 열 가져오기
df21 <- df21[,c('암종별', '발생자수')]
df21
df22 <- df22[,c('암종별','성별', '발생자수')]
df22
# 5) 특정행 열 조회
df[1:3,c('암종별','발생자수')]
# 열 데이터 타입 확인
str(df)
df$발생자수 <- ifelse(df$발생자수 == '-',0, df$발생자수)
df$발생자수 <-as.numeric(df$발생자수)
df$조발생률 <- ifelse(df$조발생률 == '-',0, df$조발생률)
df$조발생률 <-as.numeric(df$조발생률)
df
str(df)
# 암종류 확인
unique(df$'암종별') #중복제거거
# dplyr는 %>% 연산을 쓸수 있다
df2 <- df %>%
filter(암종별 != "모든 암(C00-C96)") %>%
filter(연령별 == "계")
# 성별 남
df21 <- df2 %>%
filter(성별 == "계")
df21
# 성별 여여
df22 <- df2 %>%
filter(!(성별 =="계"))
df22
# 특정 열 가져오기
df21 <- df21[,c('암종별', '발생자수')]
df21
df22 <- df22[,c('암종별','성별', '발생자수')]
df22
# 5) 특정행 열 조회
df[1:3,c('암종별','발생자수')]
df$조발생률 <-as.numeric(df$조발생률)
df22$발생자수 <- ifelse(df22$발생자수 == '-',0, df22$발생자수)
df22$발생자수 <-as.numeric(df22$발생자수)
df22
str(df22)
df21
df21$발생자수 <-as.numeric(df21$발생자수)
str(df21)
str(df21)
str(df22)
str(df1)
str(df)
str(df)
str(df21)
str(df22)
barplot(df)
barplot(df21)
str(df22)
cancer_gender <- table(df22$암종별,df22$성별,df22$발생자수)
cancer_gender
cancer_gender <- table(df$암종별,df$성별,df$발생자수)
cancer_gender
str(df22)
cancer_gender <- table(df22$암종별,df22$성별,df22$발생자수)
cancer_gender
barplot(cancer_gender)
plot(df21$발생자수)
plot(df21$발생자수, type='o', col="red")
df221 <- df22 %>%
filter(df22$성별 == "남자")
par(new = T)
plot(df221$발생자수, type='o', col="blue")
par(new = T)
plot(df221$발생자수, type='o', col="blue", axes=F)
par(new = T)
