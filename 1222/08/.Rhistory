ggtitle("")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
g$disDay
ggplot(mapping =aes(x=disDay, y=disQuantity , fill=disYear), data=g) +
geom_bar(stat="identity") +
ggtitle("")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=disQuantity , fill=disYear), data=g) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=disQuantity , fill=disYear), data=g) +
geom_bar(stat="identity", position=dodge()) +
ggtitle("")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=disQuantity , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
g$disDay
str(g$disDay)
order_v <- c(c("일","월","화","수","목","금","토"))
# Species 컬럼을 factor 자료형으로 변경하고, levels에 사용자지정 정렬용 벡터 지정
g$disDay <- factor(g$disDay, levels = order_v)
unique(g$disDay)
# 정렬하기
g_orderd <- g[order(g$disDay, decreasing = FALSE), ]
ggplot(aes(x=disDay, y=disQuantity , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=disQuantity  , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=dayAverQuantity  , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=dayAverCount  , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
View(g)
View(g)
ggplot(aes(x=disDay, y=dayAverCount  , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출 횟수수")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=dayAverCount  , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출 횟수")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=disAverQuantity  , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출량")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=dayAverQuantity  , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출량")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=dayAverCount  , fill=disYear), data=g) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출 횟수")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
for(int i in 1:12){
if (i < 10) {m = paste("0",i,sep="")}
else m = as.character(i);
temp <- getData("2021",m)
dft <- bind_rows(dft,temp)
}
for(int i in 1:12){
if (i < 10) {m = paste("0",i,sep="")}
else m = as.character(i);
temp <- getData("2021",m)
dft <- bind_rows(dft,temp)
}
for( i in 1:12){
if (i < 10) {m = paste("0",i,sep="")}
else m = as.character(i);
temp <- getData("2021",m)
dft <- bind_rows(dft,temp)
}
temp <- garbage("2021",m)
g <- fromJSON(api)
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
if (i < 10) {m = paste("0",i,sep="")}
for( i in 1:12){
if (i < 10) {m = paste("0",i,sep="")}
else m = as.character(i);
temp <- garbage("2021",m)
dft <- bind_rows(dft,temp)
}
# 데이터 열 생성
df <- df %>%
mutate(disWeek = case_when(disDay == 1 ~ "일",
disDay == 1 ~ "일",
disDay == 1 ~ "일",
disDay == 1 ~ "일",
disDay == 1 ~ "일",
))
g4 <- garbage(2020,"01")
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",z,"&disMonth=",w, sep="")
garbage <- function(z,w){
key <- "86HmDc9G1Y%2FiZoJxjyRDUlPeNAZ3IPSdRifnBnxMzWPW8T2msURZBxSXzcriGwPztUwI%2BEhvWUQkwbxEZxwqZA%3D%3D"
page <- 1
rowNum <- 10
#disYear <- z
#disMonth <- w
api <- paste("http://apis.data.go.kr/B552584/RfidFoodWasteServiceNew/getTotalDayList?ServiceKey=",key,"&type=json&page=",page,"&rowNum=",rowNum,"&disYear=",z,"&disMonth=",w, sep="")
g <- fromJSON(api)
return(g$data$list)
}
g4 <- garbage(2020,"01")
g4
if (i < 10) {m = paste("0",i,sep="")}
for( i in 1:12){
if (i < 10) {m = paste("0",i,sep="")}
else m = as.character(i);
temp <- garbage("2021",m)
dft <- bind_rows(dft,temp)
}
# 달별
library(dplyr)
for( i in 1:12){
if (i < 10) {m = paste("0",i,sep="")}
else m = as.character(i);
temp <- garbage("2021",m)
dft <- bind_rows(dft,temp)
}
dft <- garbage(1)
dft <- garbage("2021",1)
for( i in 2:12){
if (i < 10) {m = paste("0",i,sep="")}
else m = as.character(i);
temp <- garbage("2021",m)
dft <- bind_rows(dft,temp)
}
dft
# 데이터 열 생성
dft <- dft %>%
mutate(disWeek = case_when(disDay == 1 ~ "일",
disDay == 2 ~ "월",
disDay == 3 ~ "화",
disDay == 4 ~ "수",
disDay == 5 ~ "목",
disDay == 6 ~ "금",
disDay == 7 ~ "토",
))
dft
ggplot(aes(x=disDay, y=dayAverQuantity  , fill=disYear), data=dft) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출량")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
library(ggplot2)
ggplot(aes(x=disDay, y=dayAverQuantity  , fill=disYear), data=dft) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출량")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disWeek, y=dayAverCount  , fill=disYear), data=dft) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출량")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
View(dft)
order_v <- c(c("일","월","화","수","목","금","토"))
order_v <- c(c("일","월","화","수","목","금","토"))
# 컬럼을 factor 자료형으로 변경하고, levels에 사용자지정 정렬용 벡터 지정
dft$disDay <- factor(dft$disDay, levels = order_v)
unique(dft$disDay)
dft_orderd <- dft[order(dft$disDay, decreasing = FALSE), ]
g$disDay
ggplot(aes(x=disWeek, y=dayAverCount  , fill=disYear), data=dft) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출량")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disDay, y=dayAverCount  , fill=disYear), data=dft) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출량")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(aes(x=disWeek, y=dayAverCount  , fill=disYear), data=dft) +
geom_bar(stat="identity", position='dodge') +
ggtitle("요일별 평균 배출량")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
setwd("C:\Users\user\Desktop\수업자료\R프로그래밍\1222\08")
setwd("C:/Users/user/Desktop/수업자료/R프로그래밍/1222/08")
#데이터 불러오기
df <- read.csv("./data/07_기온강수량.csv",
header = T,
stringsAsFactors = F,
fileEncoding = 'euc-kr')
#데이터 불러오기
df <- read.csv("./07_기온강수량.csv",
header = T,
stringsAsFactors = F,
fileEncoding = 'euc-kr')
df <- df[, 3:5]
df
str(df)
str(df)
library(dplyr)
train <- df %>% filter(일시 < '2022-01-01' & 일시 >= '2020-01-01')
test <- df %>% filter(일시 >= '2022-01-01')
#1. 데이터준비
temp <- train $평균기온
#2. 시계열 데이터 생성
temp_ts <- ts(temp, frequency = 12, start = c(2020, 1))
#3. 시계열추세 확인
#추세 (Trend): 데이터의 장기적인 증가 또는 감소를 추세라고 한다. 그것은 반드시 선형적인 것은 아니다. 그것은 시간의 경과에 따른 데이터의 기본 패턴이다.
#계절성 (Seasonal): 시리즈가 계절적 요인에 의해 영향을 받는 경우(즉, 분기, 월 또는 요일) 시리즈에는 계절성이 존재한다. 그것은 항상 고정되고 알려진 기간이다. 예: -크리스마스 기간 동안 매출이 급 상승하는 경우 등.
#주기 (Cyclic): 일정 기간이 아닌 데이터가 상승하거나 하락할 때 우리는 이를 주기적 패턴이라고 부른다. 예를들어 - 이러한 변동 지속기간은 일반적으로 최소 2년이다.
components.ts = decompose(temp_ts)
#관측값 ( Observed ) – 실제 데이터 플롯
#추세 ( Trend ) – 데이터 점들의 전반적인 상향 또는 하향 움직임
#계절성 ( Seasonal )  – 데이터 점들의 월별/년별 패턴
#임의값 ( Random ) – 데이터의 설명할 수 없는 부분
plot(components.ts)
acf(temp_ts,lag.max=34)
install.packages("forecast")
library(forecast)
arima <- auto.arima(temp_ts)
arima
#5.모형생성
model <- arima(temp_ts, order=c(3,0,0))
model
#6.모형타당성 검사
#자기 상관함수에 의한 모형 진단
tsdiag(model)
#box-Ljungn잔차항 모형 진단
#p-value >= 0.05 통계적으로 적절
Box.test(model$residuals, lag=1, type="Ljung")
#7.예측
fore <- forecast(model, h=11)
fore
plot(fore)
test$평균기온
class(fore$mean)
pred = as.vector(fore$mean)
result <- data.frame(test = test$평균기온, pred=pred)
result
plot(result$test, type="o", col="red")
par(new=T)
plot(result$pred, type="o", col="blue")
install.packages("forecast")
library(forecast)
arima <- auto.arima(temp_ts)
install.packages("forecast")
library(forecast)
arima <- auto.arima(temp_ts)
arima
#5.모형생성
model <- arima(temp_ts, order=c(3,0,0))
model
#6.모형타당성 검사
#자기 상관함수에 의한 모형 진단
tsdiag(model)
#box-Ljungn잔차항 모형 진단
#p-value >= 0.05 통계적으로 적절
Box.test(model$residuals, lag=1, type="Ljung")
#7.예측
fore <- forecast(model, h=11)
fore
plot(fore)
test$평균기온
class(fore$mean)
pred = as.vector(fore$mean)
result <- data.frame(test = test$평균기온, pred=pred)
result
plot(result$test, type="o", col="red")
par(new=T)
plot(result$pred, type="o", col="blue")
source("C:/Users/user/Desktop/수업자료/R프로그래밍/1222/08/08.R", encoding = 'UTF-8', echo=TRUE)
df <- read.csv("./07_출생아수.csv",
header = T,
stringsAsFactors = F,
fileEncoding = 'euc-kr')
df <- read.csv("./07_출생아수.csv",
header = T,
stringsAsFactors = F,
fileEncoding = 'euc-kr')
df
install.packages("forecast")
install.packages("forecast")
library(forecast)
#데이터 불러오기
df <- read.csv("./07_기온강수량.csv",
header = T,
stringsAsFactors = F,
fileEncoding = 'euc-kr')
View(df)
df <- read.csv("./07_출생아수.csv",
header = T,
stringsAsFactors = F,
fileEncoding = 'euc-kr')
df
library(dplyr)
str(df)
library(dplyr)
train <- df %>% filter(시점 > 2000 & 시점 < 2007)
test <- df %>% filter(시점 >= 2007)
names(df)
names(df) <- c("시점" ,"출생아수")
names(df)
str(df)
library(dplyr)
train <- df %>% filter(시점 > 2000 & 시점 < 2007)
test <- df %>% filter(시점 >= 2007)
#1. 데이터준비
temp <- train $출생아수
#2. 시계열 데이터 생성
temp_ts <- ts(temp, frequency = 1, start = c(2000))
#3. 시계열추세 확인
components.ts = decompose(temp_ts)
acf(temp_ts,lag.max=22)
install.packages("forecast")
install.packages("forecast")
library(forecast)
arima <- auto.arima(temp_ts)
arima
#5.모형생성
model <- arima(temp_ts, order=c(3,0,0))
model
#6.모형타당성 검사
#자기 상관함수에 의한 모형 진단
tsdiag(model)
#box-Ljungn잔차항 모형 진단
#p-value >= 0.05 통계적으로 적절
Box.test(model$residuals, lag=1, type="Ljung")
#7.예측
fore <- forecast(model, h=11)
fore
plot(fore)
test$평균기온
test$출생아수
class(fore$mean)
pred = as.vector(fore$mean)
result <- data.frame(test = test$평균기온, pred=pred)
result <- data.frame(test = test$출생아수, pred=pred)
result
result <- data.frame(test = test$출생아수, pred=pred)
result
pred = as.vector(fore$mean)
#7.예측
fore <- forecast(model, h=22)
fore
plot(fore)
#5.모형생성
model <- arima(temp_ts, order=c(1,0,0))
model
#6.모형타당성 검사
#자기 상관함수에 의한 모형 진단
tsdiag(model)
#box-Ljungn잔차항 모형 진단
#p-value >= 0.05 통계적으로 적절
Box.test(model$residuals, lag=1, type="Ljung")
#7.예측
fore <- forecast(model, h=22)
fore
plot(fore)
arima <- auto.arima(temp_ts)
arima
#5.모형생성
model <- arima(temp_ts, order=c(0,1,0))
model
#6.모형타당성 검사
#자기 상관함수에 의한 모형 진단
tsdiag(model)
#box-Ljungn잔차항 모형 진단
#p-value >= 0.05 통계적으로 적절
Box.test(model$residuals, lag=1, type="Ljung")
#7.예측
fore <- forecast(model)
fore
plot(fore)
test$출생아수
class(fore$mean)
pred = as.vector(fore$mean)
result <- data.frame(test = test$출생아수, pred=pred)
par(mfrow=c(1,2))
plot(fore)
plot(fore)
plot(fore)
model2 <- forcast(model,h=6)
plot(model2)
model2 <- forecast(model,h=6)
plot(model2)
train <- df %>% filter(시점 > 2000 & 시점 < 2011)
test <- df %>% filter(시점 >= 2011)
#1. 데이터준비
temp <- train $출생아수
#2. 시계열 데이터 생성
temp_ts <- ts(temp, frequency = 1, start = c(2011))
acf(temp_ts,lag.max=22)
install.packages("forecast")
install.packages("forecast")
library(forecast)
arima <- auto.arima(temp_ts)
arima
#5.모형생성
model <- arima(temp_ts, order=c(0,1,0))
model
#6.모형타당성 검사
#자기 상관함수에 의한 모형 진단
tsdiag(model)
#box-Ljungn잔차항 모형 진단
#p-value >= 0.05 통계적으로 적절
Box.test(model$residuals, lag=1, type="Ljung")
#7.예측
fore <- forecast(model)
fore
#7.예측
fore <- forecast(model, h=6)
fore
plot(fore)
test$출생아수
View(test)
class(fore$mean)
pred = as.vector(fore$mean)
result <- data.frame(test = test$출생아수, pred=pred)
#7.예측
fore <- forecast(model, h=2)
fore
plot(fore)
test$출생아수
class(fore$mean)
pred = as.vector(fore$mean)
result <- data.frame(test = test$출생아수, pred=pred)
result
#7.예측
fore <- forecast(model, h=6)
fore
plot(fore)
train <- df %>% filter(시점 > 2000 & 시점 < 2011)
test <- df %>% filter(시점 >= 2011)
#1. 데이터준비
temp <- train $출생아수
#2. 시계열 데이터 생성
temp_ts <- ts(temp, frequency = 1, start = c(2011))
acf(temp_ts,lag.max=22)
install.packages("forecast")
install.packages("forecast")
library(forecast)
arima <- auto.arima(temp_ts)
arima
#5.모형생성
model <- arima(temp_ts, order=c(0,1,0))
model
#6.모형타당성 검사
#자기 상관함수에 의한 모형 진단
tsdiag(model)
#box-Ljungn잔차항 모형 진단
#p-value >= 0.05 통계적으로 적절
Box.test(model$residuals, lag=1, type="Ljung")
#7.예측
fore <- forecast(model, h=6)
fore
plot(fore)
test$출생아수
class(fore$mean)
pred = as.vector(fore$mean)
str(pred)
result <- data.frame(test = test$출생아수, pred=pred)
#7.예측
fore <- forecast(model, h=11)
fore
plot(fore)
test$출생아수
class(fore$mean)
pred = as.vector(fore$mean)
str(pred)
result <- data.frame(test = test$출생아수, pred=pred)
result
plot(result$test, type="o", col="red")
par(new=T)
plot(result$pred, type="o", col="blue")
train <- df %>% filter(시점 > 2000 & 시점 < 2010)
test <- df %>% filter(시점 >= 2010)
#1. 데이터준비
temp <- train $출생아수
#2. 시계열 데이터 생성
temp_ts <- ts(temp, frequency = 1, start = c(2011))
acf(temp_ts,lag.max=22)
install.packages("forecast")
install.packages("forecast")
library(forecast)
arima <- auto.arima(temp_ts)
arima
#5.모형생성
model <- arima(temp_ts, order=c(0,1,0))
model
#6.모형타당성 검사
#자기 상관함수에 의한 모형 진단
tsdiag(model)
#box-Ljungn잔차항 모형 진단
#p-value >= 0.05 통계적으로 적절
Box.test(model$residuals, lag=1, type="Ljung")
#7.예측
fore <- forecast(model, h=11)
fore
plot(fore)
test$출생아수
class(fore$mean)
pred = as.vector(fore$mean)
str(pred)
result <- data.frame(test = test$출생아수, pred=pred)
result
plot(result$test, type="o", col="red")
par(new=T)
plot(result$pred, type="o", col="blue")
